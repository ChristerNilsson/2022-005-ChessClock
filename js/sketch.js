// Generated by CoffeeScript 2.5.1
var Button, ButtonTime, EditPage, MainPage, TimeButton, bonuses, clocks, d2, draw, edit, editPage, flip, left, mainPage, mouseClicked, ok, page, pause, player, pretty, right, round3, setup, state, swap,
  modulo = function(a, b) { return (+a % (b = +b) + b) % b; };

state = 0;


// 0 = paused (player in [-1,0,1])
//   player = -1 no button
//   player = 0 left button disabled
//   player = 1 right button disabled
//   PLAY
//   NEW

// 1 = not running (player==-1)
//   player = -1 both buttons
//   PAUSE

// 2 = running (player in [0,1])

// 3 = edit
//   OK
player = -1; // -1, 0=left, 1=right

clocks = [
  3 * 60,
  3 * 60 // sekunder med decimaler
];

bonuses = [
  2,
  2 // sekunder med decimaler
];

editPage = null;

mainPage = null;

page = null;

flip = function() {
  return this.value = 1 - this.value;
};

swap = function() {
  return editPage.hcpSwap = -editPage.hcpSwap;
};

left = function() {
  if (state === 0) {
    return;
  }
  if (state === 1) {
    state = 2;
    clocks[player] += bonuses[player];
    player = 0;
    return mainPage.buttons['pause'].visible = true;
  }
};

right = function() {
  if (state === 0) {
    return;
  }
  if (state === 1) {
    state = 2;
    clocks[player] += bonuses[player];
    player = 1;
    return mainPage.buttons['pause'].visible = true;
  }
};

// if state in [-2,2] then return
// state = 2
// clocks[player] += bonuses[player]
// player = 0
// mainPage.buttons['pause'].enabled = true
edit = function() {
  if (state === 0) {
    state = 3;
    return page = editPage;
  }
};

pause = function() {
  if (state === 1 || state === 2) {
    state = 0;
  }
  mainPage.buttons['play'].visible = true;
  return mainPage.buttons['pause'].visible = false;
};

ok = function() {
  state = 0;
  page = mainPage;
  clocks[0] = editPage.players[0][0];
  clocks[1] = editPage.players[1][0];
  bonuses[0] = editPage.players[0][1];
  bonuses[1] = editPage.players[1][1];
  return player = -1;
};

MainPage = class MainPage {
  constructor() {
    this.buttons = {};
    this.buttons['left'] = new ButtonTime(0, 120, 40, 230, 60, left, true);
    this.buttons['right'] = new ButtonTime(1, width - 120, 40, 230, 60, right, true);
    this.buttons['play'] = new Button('play', 250, 100 + 40, 100, 40, pause, true, true);
    this.buttons['pause'] = new Button('pause', 250, 100 + 100, 100, 40, pause, false, true);
    this.buttons['new'] = new Button('new', 500, 100 + 40, 100, 40, edit, true, true);
  }

  draw() {
    var key;
    push();
    background('black');
    rectMode(CENTER);
    textAlign(CENTER, CENTER);
    for (key in this.buttons) {
      this.buttons[key].draw();
    }
    if (state === 2 && clocks[player] > 0) {
      clocks[player] -= 1 / 60;
    }
    return pop();
  }

  mouseClicked() {
    var button, key;
    for (key in this.buttons) {
      button = this.buttons[key];
      if (!button.inside(mouseX, mouseY)) {
        continue;
      }
      if (state === 0) {
        if (key === 'play') {
          state = player === -1 ? 1 : 2;
          this.buttons['play'].visible = false;
          this.buttons['pause'].visible = true;
          this.buttons['new'].visible = false;
        }
        if (key === 'new') {
          button.click();
        }
        return;
      }
      if (state === 1) {
        if (key === 'left') {
          player = 1;
          state = 2;
        }
        if (key === 'right') {
          player = 0;
          state = 2;
        }
        if (key === 'pause') {
          state = 0;
          this.buttons['play'].visible = true;
          this.buttons['pause'].visible = false;
          this.buttons['new'].visible = true;
        }
        return;
      }
      if (state === 2) {
        if (key === 'left') {
          player = 1;
        }
        if (key === 'right') {
          player = 0;
        }
        if (key === 'pause') {
          state = 0;
          this.buttons['play'].visible = true;
          this.buttons['pause'].visible = false;
          this.buttons['new'].visible = true;
        }
        return;
      }
    }
  }

};

// if key=='play'
// 	state=0 
// 	@buttons['play'].enabled = true
// 	@buttons['pause'].enabled = false
// 	@buttons['new'].enabled = true
EditPage = class EditPage {
  constructor() {
    var cells, dy, headers, j, k, len, ref, x, yoff;
    this.matrix = [];
    yoff = 30;
    ref = range(6);
    for (k = 0, len = ref.length; k < len; k++) {
      j = ref[k];
      headers = 'h m s m s t'.split(' ');
      cells = [];
      x = 50 + j * 60;
      dy = 40;
      cells.push(new TimeButton(headers[j], x, yoff + 2 * dy, flip, false));
      cells.push(new TimeButton(1, x, yoff + 3 * dy, flip, true));
      cells.push(new TimeButton(2, x, yoff + 4 * dy, flip, true));
      cells.push(new TimeButton(4, x, yoff + 5 * dy, flip, true));
      cells.push(new TimeButton(8, x, yoff + 6 * dy, flip, true));
      cells.push(new TimeButton(15, x, yoff + 7 * dy, flip, true));
      cells.push(new TimeButton(30, x, yoff + 8 * dy, flip, true));
      this.matrix.push(cells);
    }
    // stÃ¤ll in 3m+2s (default)
    this.matrix[1][1].value = 1;
    this.matrix[1][2].value = 1;
    this.matrix[4][2].value = 1;
    this.buttons = [];
    this.buttons.push(new Button('ok', 500, 350, 100, 40, ok, true, true));
    this.buttons.push(new Button('swap', width / 2, 30, 100, 40, swap, true, true));
    this.sums = [0, 0, 0, 0, 0, 0];
    this.hcpSwap = 1;
  }

  draw() {
    var button, cells, header, headers, i, j, k, l, len, len1, len2, len3, n, o, ref, ref1, ref2, ref3, y;
    push();
    background('black');
    fill('white');
    textSize(32);
    text('reflection', 45, 90);
    text('bonus', 212, 90);
    text('hcp', 325, 90);
    fill('white');
    textSize(20);
    rectMode(CENTER);
    textAlign(CENTER, CENTER);
    headers = 'h m s m s t'.split(' ');
    this.sums = [0, 0, 0, 0, 0, 0];
    ref = this.buttons;
    for (k = 0, len = ref.length; k < len; k++) {
      button = ref[k];
      button.draw();
    }
    ref1 = range(this.matrix.length);
    for (l = 0, len1 = ref1.length; l < len1; l++) {
      i = ref1[l];
      cells = this.matrix[i];
      ref2 = range(cells.length);
      for (n = 0, len2 = ref2.length; n < len2; n++) {
        j = ref2[n];
        button = cells[j];
        button.draw();
        if (j !== 0) {
          this.sums[i] += button.text * button.value;
        }
      }
    }
    header = '';
    ref3 = range(6);
    for (o = 0, len3 = ref3.length; o < len3; o++) {
      i = ref3[o];
      if (this.sums[i] > 0) {
        header += this.sums[i] + headers[i];
      }
      if (i === 2) {
        header += ' + ';
      }
    }
    this.hcp = this.hcpSwap * this.sums[5] / 60; // 0.0 .. 1.0
    this.refl = 3600 * this.sums[0] + 60 * this.sums[1] + this.sums[2];
    this.bonus = 60 * this.sums[3] + this.sums[4];
    this.players = [];
    this.players[0] = [this.refl * (1 + this.hcp), this.bonus * (1 + this.hcp)];
    this.players[1] = [this.refl * (1 - this.hcp), this.bonus * (1 - this.hcp)];
    y = 30;
    if (this.sums[5] === 0) { // inget handicap
      this.buttons[1].visible = false;
      fill('white');
      text(header, width / 2, y); // handicap
    } else {
      this.buttons[1].visible = true;
      fill('red');
      textAlign(LEFT, CENTER);
      left = pretty(this.players[0][0]) + ' + ' + pretty(this.players[0][1]);
      text(left, 0, y);
      fill('green');
      textAlign(RIGHT, CENTER);
      right = pretty(this.players[1][0]) + ' + ' + pretty(this.players[1][1]);
      text(right, width, y);
    }
    return pop();
  }

  mouseClicked() {
    var button, cells, k, l, len, len1, ref, ref1, results;
    ref = this.buttons;
    for (k = 0, len = ref.length; k < len; k++) {
      button = ref[k];
      if (button.inside(mouseX, mouseY)) {
        button.click();
      }
    }
    ref1 = this.matrix;
    results = [];
    for (l = 0, len1 = ref1.length; l < len1; l++) {
      cells = ref1[l];
      results.push((function() {
        var len2, n, results1;
        results1 = [];
        for (n = 0, len2 = cells.length; n < len2; n++) {
          button = cells[n];
          if (button.visible && button.inside(mouseX, mouseY)) {
            results1.push(button.click());
          } else {
            results1.push(void 0);
          }
        }
        return results1;
      })());
    }
    return results;
  }

};

round3 = function(x) {
  return Math.round(x * 1000) / 1000;
};

pretty = function(tot) {
  var h, header, m, s;
  s = tot % 60;
  tot = (tot - s) / 60;
  m = tot % 60;
  tot = (tot - m) / 60;
  h = tot % 60;
  header = '';
  if (h > 0) {
    header += round3(h) + 'h';
  }
  if (m > 0) {
    header += round3(m) + 'm';
  }
  if (s > 0) {
    header += round3(s) + 's';
  }
  return header;
};

//##############################
Button = class Button {
  constructor(text1, x1, y1, width1, height1, click1, visible1 = true, rect1 = true) {
    this.text = text1;
    this.x = x1;
    this.y = y1;
    this.width = width1;
    this.height = height1;
    this.click = click1;
    this.visible = visible1;
    this.rect = rect1;
  }

  draw() {
    if (!this.visible) {
      return;
    }
    if (this.rect) {
      fill('white');
      rect(this.x, this.y, this.width, this.height);
      fill('black');
    } else {
      fill('white');
    }
    textSize(32);
    return text(this.text, this.x, this.y);
  }

  inside(mx, my) {
    return (this.x - this.width / 2 < mx && mx < this.x + this.width / 2) && (this.y - this.height / 2 < my && my < this.y + this.height / 2);
  }

  click() {
    return this.click();
  }

};

d2 = function(x) {
  x = Math.round(x);
  if (x < 10) {
    return "0" + x;
  } else {
    return x;
  }
};

TimeButton = class TimeButton extends Button { // within EditPage
  constructor(text, x, y, click, visible) {
    super(text, x, y, 30, 30, click, visible);
    this.value = 0;
  }

  draw() {
    fill(['gray', 'yellow'][this.value]);
    textSize(32);
    textAlign(CENTER, CENTER);
    text(this.text, this.x, this.y);
    fill(['gray', 'yellow'][this.value]);
    textSize(32);
    textAlign(CENTER, CENTER);
    return text(this.text, this.x, this.y);
  }

};

ButtonTime = class ButtonTime extends Button { // within MainPage
  constructor(player1, x, y, width, height, click, visible) {
    super("", x, y, width, height, click, visible);
    this.player = player1;
  }

  draw() {
    var s;
    textSize(60);
    if ((state === 1 || state === 2) && player === -1 || player === this.player) {
      fill(this.visible ? 'white' : "black");
      rect(this.x, this.y, this.width, this.height);
      fill(this.visible ? 'black' : "white");
    } else {
      fill(this.visible ? 'white' : "black");
    }
    s = clocks[this.player];
    //fill 'black'
    text(d2(Math.floor(s / 3600)), this.x - 80, this.y);
    text(':', this.x - 40, this.y);
    text(d2(Math.floor(s / 60)), this.x + 0, this.y);
    text(':', this.x + 40, this.y);
    return text(d2(modulo(s, 60)), this.x + 80, this.y);
  }

  click() {
    return this.click();
  }

};

draw = function() {
  push();
  page.draw();
  fill('white'); // DEBUG!
  textSize(32);
  textAlign(CENTER, CENTER);
  text(`state:${state}`, 0.85 * width, height / 2);
  text(`player:${player}`, 0.85 * width, height / 2 + 50);
  return pop();
};

setup = function() {
  createCanvas(600, 400);
  editPage = new EditPage();
  mainPage = new MainPage();
  return page = mainPage;
};

mouseClicked = function() {
  return page.mouseClicked();
};

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=c:\github\2022-005-ChessClock\coffee\sketch.coffee